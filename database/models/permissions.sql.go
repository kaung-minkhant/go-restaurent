// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: permissions.sql

package models

import (
	"context"
)

const createPermission = `-- name: CreatePermission :one
INSERT INTO permissions (id, permission, method, route, created_at, updated_at, deleted_at)
VALUES (DEFAULT, $1, $2, $3, NOW() AT TIME ZONE 'utc', NOW() AT TIME ZONE 'utc', NULL)
RETURNING id, permission, method, route, created_at, updated_at, deleted_at
`

type CreatePermissionParams struct {
	Permission string `json:"permission"`
	Method     string `json:"method"`
	Route      string `json:"route"`
}

func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, createPermission, arg.Permission, arg.Method, arg.Route)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Permission,
		&i.Method,
		&i.Route,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getPermissionByMethodAndRoute = `-- name: GetPermissionByMethodAndRoute :one
SELECT id, permission, method, route, created_at, updated_at, deleted_at FROM permissions
WHERE method = $1
AND route = $2
LIMIT 1
`

type GetPermissionByMethodAndRouteParams struct {
	Method string `json:"method"`
	Route  string `json:"route"`
}

func (q *Queries) GetPermissionByMethodAndRoute(ctx context.Context, arg GetPermissionByMethodAndRouteParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, getPermissionByMethodAndRoute, arg.Method, arg.Route)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Permission,
		&i.Method,
		&i.Route,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
