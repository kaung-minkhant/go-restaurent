// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tokens.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const createTokens = `-- name: CreateTokens :one
INSERT INTO auth.tokens (id, access_token, refresh_token, session, valid)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, refresh_token, session, access_token, valid
`

type CreateTokensParams struct {
	ID           uuid.UUID `json:"id"`
	AccessToken  string    `json:"access_token"`
	RefreshToken string    `json:"refresh_token"`
	Session      uuid.UUID `json:"session"`
	Valid        bool      `json:"valid"`
}

func (q *Queries) CreateTokens(ctx context.Context, arg CreateTokensParams) (AuthToken, error) {
	row := q.db.QueryRowContext(ctx, createTokens,
		arg.ID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.Session,
		arg.Valid,
	)
	var i AuthToken
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.Session,
		&i.AccessToken,
		&i.Valid,
	)
	return i, err
}

const getAuthByTokens = `-- name: GetAuthByTokens :one
SELECT id, refresh_token, session, access_token, valid FROM auth.tokens
WHERE refresh_token = $1 AND access_token = $2
`

type GetAuthByTokensParams struct {
	RefreshToken string `json:"refresh_token"`
	AccessToken  string `json:"access_token"`
}

func (q *Queries) GetAuthByTokens(ctx context.Context, arg GetAuthByTokensParams) (AuthToken, error) {
	row := q.db.QueryRowContext(ctx, getAuthByTokens, arg.RefreshToken, arg.AccessToken)
	var i AuthToken
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.Session,
		&i.AccessToken,
		&i.Valid,
	)
	return i, err
}

const invalidateToken = `-- name: InvalidateToken :one
UPDATE auth.tokens
SET valid = false
WHERE refresh_token = $1 AND access_token = $2
RETURNING id, refresh_token, session, access_token, valid
`

type InvalidateTokenParams struct {
	RefreshToken string `json:"refresh_token"`
	AccessToken  string `json:"access_token"`
}

func (q *Queries) InvalidateToken(ctx context.Context, arg InvalidateTokenParams) (AuthToken, error) {
	row := q.db.QueryRowContext(ctx, invalidateToken, arg.RefreshToken, arg.AccessToken)
	var i AuthToken
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.Session,
		&i.AccessToken,
		&i.Valid,
	)
	return i, err
}

const invalidateTokenFamily = `-- name: InvalidateTokenFamily :exec
DELETE FROM auth.tokens
WHERE session = $1
`

func (q *Queries) InvalidateTokenFamily(ctx context.Context, session uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, invalidateTokenFamily, session)
	return err
}
