// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: category.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO menu_categories (id, name, img_url, created_at, updated_at, deleted_at)
VALUES ($1, $2, $3, NOW() AT TIME ZONE 'utc', NOW() AT TIME ZONE 'utc', NULL)
RETURNING id, name, img_url, created_at, updated_at, deleted_at
`

type CreateCategoryParams struct {
	ID     uuid.UUID `json:"id"`
	Name   string    `json:"name"`
	ImgUrl string    `json:"img_url"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (MenuCategory, error) {
	row := q.db.QueryRowContext(ctx, createCategory, arg.ID, arg.Name, arg.ImgUrl)
	var i MenuCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImgUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :one
UPDATE menu_categories
SET deleted_at = NOW()
WHERE id = $1
RETURNING id, name, img_url, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteCategory(ctx context.Context, id uuid.UUID) (MenuCategory, error) {
	row := q.db.QueryRowContext(ctx, deleteCategory, id)
	var i MenuCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImgUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAllCategory = `-- name: GetAllCategory :many
SELECT id, name, img_url, created_at, updated_at, deleted_at FROM menu_categories
`

func (q *Queries) GetAllCategory(ctx context.Context) ([]MenuCategory, error) {
	rows, err := q.db.QueryContext(ctx, getAllCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MenuCategory
	for rows.Next() {
		var i MenuCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ImgUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryById = `-- name: GetCategoryById :one
SELECT id, name, img_url, created_at, updated_at, deleted_at FROM menu_categories
WHERE id = $1
`

func (q *Queries) GetCategoryById(ctx context.Context, id uuid.UUID) (MenuCategory, error) {
	row := q.db.QueryRowContext(ctx, getCategoryById, id)
	var i MenuCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImgUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
