// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, name, encrypted_password, role, created_at, updated_at, deleted_at, employee_id)
VALUES ($1, $2, $3, $4, NOW() AT TIME ZONE 'utc', NOW() AT TIME ZONE 'utc', NULL, $5)
RETURNING id, name, encrypted_password, role, created_at, updated_at, deleted_at, employee_id
`

type CreateUserParams struct {
	ID                uuid.UUID `json:"id"`
	Name              string    `json:"name"`
	EncryptedPassword string    `json:"encrypted_password"`
	Role              string    `json:"role"`
	EmployeeID        string    `json:"employee_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.EncryptedPassword,
		arg.Role,
		arg.EmployeeID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EncryptedPassword,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.EmployeeID,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
UPDATE users
SET deleted_at = NOW() AT TIME ZONE 'utc'
WHERE id = $1
RETURNING id, name, encrypted_password, role, created_at, updated_at, deleted_at, employee_id
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EncryptedPassword,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.EmployeeID,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, name, encrypted_password, role, created_at, updated_at, deleted_at, employee_id FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.EncryptedPassword,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.EmployeeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmployeeId = `-- name: GetUserByEmployeeId :one
SELECT id, name, encrypted_password, role, created_at, updated_at, deleted_at, employee_id FROM users
WHERE employee_id = $1
`

func (q *Queries) GetUserByEmployeeId(ctx context.Context, employeeID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmployeeId, employeeID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EncryptedPassword,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.EmployeeID,
	)
	return i, err
}
