// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: menu_items.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const createMenuItem = `-- name: CreateMenuItem :one
INSERT INTO menu_items (id, name, price, description, ingredients, img_url, created_at, updated_at, deleted_at, category, sub_category)
VALUES ($1, $2, $3, $4, $5, $6, NOW() AT TIME ZONE 'utc', NOW() AT TIME ZONE 'utc', NULL, $7, $8)
RETURNING id, name, price, description, ingredients, img_url, created_at, updated_at, deleted_at, category, sub_category
`

type CreateMenuItemParams struct {
	ID          uuid.UUID     `json:"id"`
	Name        string        `json:"name"`
	Price       float32       `json:"price"`
	Description string        `json:"description"`
	Ingredients string        `json:"ingredients"`
	ImgUrl      string        `json:"img_url"`
	Category    uuid.NullUUID `json:"category"`
	SubCategory uuid.NullUUID `json:"sub_category"`
}

func (q *Queries) CreateMenuItem(ctx context.Context, arg CreateMenuItemParams) (MenuItem, error) {
	row := q.db.QueryRowContext(ctx, createMenuItem,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.Description,
		arg.Ingredients,
		arg.ImgUrl,
		arg.Category,
		arg.SubCategory,
	)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Description,
		&i.Ingredients,
		&i.ImgUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Category,
		&i.SubCategory,
	)
	return i, err
}

const deleteMenuItem = `-- name: DeleteMenuItem :one
UPDATE menu_items
SET deleted_at = NOW()
WHERE id = $1
RETURNING id, name, price, description, ingredients, img_url, created_at, updated_at, deleted_at, category, sub_category
`

func (q *Queries) DeleteMenuItem(ctx context.Context, id uuid.UUID) (MenuItem, error) {
	row := q.db.QueryRowContext(ctx, deleteMenuItem, id)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Description,
		&i.Ingredients,
		&i.ImgUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Category,
		&i.SubCategory,
	)
	return i, err
}

const getAllMenuItems = `-- name: GetAllMenuItems :many
SELECT id, name, price, description, ingredients, img_url, created_at, updated_at, deleted_at, category, sub_category FROM menu_items
`

func (q *Queries) GetAllMenuItems(ctx context.Context) ([]MenuItem, error) {
	rows, err := q.db.QueryContext(ctx, getAllMenuItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MenuItem
	for rows.Next() {
		var i MenuItem
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Description,
			&i.Ingredients,
			&i.ImgUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Category,
			&i.SubCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMenuItemById = `-- name: GetMenuItemById :one
SELECT id, name, price, description, ingredients, img_url, created_at, updated_at, deleted_at, category, sub_category FROM menu_items
WHERE id = $1
`

func (q *Queries) GetMenuItemById(ctx context.Context, id uuid.UUID) (MenuItem, error) {
	row := q.db.QueryRowContext(ctx, getMenuItemById, id)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Description,
		&i.Ingredients,
		&i.ImgUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Category,
		&i.SubCategory,
	)
	return i, err
}

const hardDeleteMenuItem = `-- name: HardDeleteMenuItem :one
DELETE FROM menu_items
WHERE id = $1
RETURNING id, name, price, description, ingredients, img_url, created_at, updated_at, deleted_at, category, sub_category
`

func (q *Queries) HardDeleteMenuItem(ctx context.Context, id uuid.UUID) (MenuItem, error) {
	row := q.db.QueryRowContext(ctx, hardDeleteMenuItem, id)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Description,
		&i.Ingredients,
		&i.ImgUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Category,
		&i.SubCategory,
	)
	return i, err
}
