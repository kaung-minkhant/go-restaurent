// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: role_permissions.sql

package models

import (
	"context"
)

const createRolePermission = `-- name: CreateRolePermission :one
INSERT INTO role_permissions (id, role, permission, created_at, updated_at, deleted_at)
VALUES (DEFAULT, $1, $2, NOW() AT TIME ZONE 'utc', NOW() AT TIME ZONE 'utc', NULL)
RETURNING id, role, permission, created_at, updated_at, deleted_at
`

type CreateRolePermissionParams struct {
	Role       string `json:"role"`
	Permission string `json:"permission"`
}

func (q *Queries) CreateRolePermission(ctx context.Context, arg CreateRolePermissionParams) (RolePermission, error) {
	row := q.db.QueryRowContext(ctx, createRolePermission, arg.Role, arg.Permission)
	var i RolePermission
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Permission,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getRoleByPermissionName = `-- name: GetRoleByPermissionName :one
SELECT id, role, permission, created_at, updated_at, deleted_at FROM role_permissions
WHERE permission = $1
LIMIT 1
`

func (q *Queries) GetRoleByPermissionName(ctx context.Context, permission string) (RolePermission, error) {
	row := q.db.QueryRowContext(ctx, getRoleByPermissionName, permission)
	var i RolePermission
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Permission,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
